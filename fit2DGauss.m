function [fitresult, gof, n] = fit2DGauss(data)
%FIT2DGauss(DATA)
%  This is a 2D Gaussian Fit for Intensities. Thus, the square of the
%  electric field. The resultant width is the width of a gaussian beam at
%  1/e^2 maximum value. If you want the width of a density distribution
%  beware that this CAN be defined differently, i.e. with 1/e maximum
%  value. This results in a smaller width: 2*sigma = wx_intensity.
%  Creates a 2D gaussian fit. The input data array "data" will be rescaled
%  to order of magnitude unity. This increases the fitting speed massively.
%  For scaling purposes the order of magnitude, used for scaling will be
%  returned via the variable n.
%  If the input parameter "offset" is set to 0 the fit will be forced to
%  have 0 offset. Otherwise the offset is a free parameter.
%
%  Data for fit:
%      Z Output: data
%  Output:
%      fitresult : a fit object representing the fit.
%      gof : structure with goodness-of fit info.
%
%  See also FIT, CFIT, SFIT.
%  Auto-generated by MATLAB on 17-Nov-2015 18:48:31

[sx, sy] = size(data);

%% Fit: fits a two dimensional gaussian
[xData, yData, zData] = prepareSurfaceData( 1:size(data,2), 1:size(data,1), data );

% try to find starting conditions
x0Init = xData(zData == max(zData));
if abs(x0Init) > sx/2
    x0Init = sx/2;
end
y0Init = yData(zData == max(zData));
if abs(y0Init) > sy/2
    ys0Init = sy/2;
end
aInit = max(zData);
cInit = min(zData);

% Set up fittype and options.
opts = fitoptions( 'Method', 'NonlinearLeastSquares' );
opts.Display = 'Off';

    ft = fittype( 'c+A*exp(-2*((x-x0)/wx)^2)*exp(-2*((y-y0)/wy)^2)', 'independent', {'x', 'y'}, 'dependent', 'z' );
    opts.StartPoint = [aInit cInit 20 20 x0Init(1) y0Init(1)];

% Fit model to data.
[fitresult, gof] = fit( [xData, yData], zData, ft, opts );


